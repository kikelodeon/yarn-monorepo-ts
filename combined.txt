
C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\jest.config.ts

import type { Config } from 'jest';

const config: Config = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  testMatch: ['**/?(*.)+(spec|test).[tj]s?(x)'], // Match .spec.ts or .test.ts files
  moduleFileExtensions: ['ts', 'js'],
  modulePathIgnorePatterns: ['<rootDir>/dist/', '.*/dist/'], // Ignore all dist folders
  transform: {
    '^.+\\.ts$': 'ts-jest', // Use ts-jest to transform TypeScript files
  },
};

export default config;



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\package.json

{
  "name": "my-monorepo",
  "private": true,
  "workspaces": [
    "packages/*/**",
    "services/*"
  ],
  "scripts": {
    "build": "yarn workspaces foreach --all --topological-dev run build ",
    "buildasync": "yarn workspaces foreach -p --all run build",
    "test": "jest --passWithNoTests",
    "clean": "yarn workspaces foreach --all run clean",
    "clear": "yarn workspaces foreach --all run clear && rimraf node_modules",
    "uninstall": "yarn workspaces foreach --all run uninstall && rimraf node_modules",
    "lint": "yarn workspaces foreach run lint"
  },
  "devDependencies": {
    "@types/jest": "^29.5.14",
    "@types/node": "^20.4.5",
    "jest": "^29.7.0",
    "rimraf": "^6.0.1",
    "ts-jest": "^29.2.5",
    "ts-node": "^10.9.2",
    "typescript": "^5.7.3"
  },
  "dependencies": {
    "@prisma/client": "^6.2.1",
    "argon2": "^0.41.1",
    "inversify": "^6.2.1",
    "prisma": "^6.2.1"
  }
}



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\tsconfig.json

{
  "compilerOptions": {
    "composite": true,
    "declaration": true,
    "declarationMap": true,
    "outDir": "dist",
    "rootDir": ".",
    "module": "CommonJS",
    "target": "ES2020",
    "strict": true,
    "esModuleInterop": true,
    "baseUrl": "."
  },
  "files": [],
  "include": [],
  "references": [
    //Utils
    { "path": "./packages/utils/env" },
    { "path": "./packages/utils/uuid6" },
    //Common
    { "path": "./packages/domain/_common" },
    { "path": "./packages/infrastructure/_common" },
    { "path": "./packages/contracts/_common" },
    { "path": "./packages/application/_common" },
    //User
    { "path": "./packages/domain/user" },
    { "path": "./packages/infrastructure/user" },
    { "path": "./packages/contracts/user" },
    { "path": "./packages/application/user" },
    //Session
  /*  { "path": "./packages/domain/session" },
    { "path": "./packages/infrastructure/session" },
    { "path": "./packages/contracts/session" },
    { "path": "./packages/application/session" },*/
    //Services
    { "path": "./services/service-authentication" },
    //{ "path": "./services/service-mailing" }
  ]
}



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\.vscode\launch.json

{
    "version": "0.2.0",
    "compounds": [
      {
        "name": "Debug Full Monorepo",
        "configurations": ["Debug Lib", "Debug Service"]
      }
    ],
    "configurations": [
      {
        "name": "Debug Lib",
        "type": "node",
        "request": "launch",
        "program": "${workspaceFolder}/packages/lib/src/index.ts",
        "outFiles": ["${workspaceFolder}/packages/lib/dist/**/*.js"],
        "preLaunchTask": "Build Lib",
        "sourceMaps": true,
        "console": "integratedTerminal",
        "internalConsoleOptions": "openOnSessionStart"
      },
      {
        "name": "Debug Service",
        "type": "node",
        "request": "launch",
        "program": "${workspaceFolder}/packages/service-authentication/src/index.ts",
        "outFiles": ["${workspaceFolder}/packages/service-authentication/dist/**/*.js"],
        "preLaunchTask": "Build Service",
        "sourceMaps": true,
        "console": "integratedTerminal",
        "internalConsoleOptions": "openOnSessionStart"
      }
    ]
  }
  


C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\.vscode\tasks.json

{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Build Lib",
      "type": "shell",
      "command": "yarn workspace @kikerepo/lib build",
      "group": {
        "kind": "build",
        "isDefault": true
      }
    },
    {
      "label": "Build Service",
      "type": "shell",
      "command": "yarn workspace @kikerepo/service-authentication build",
      "group": {
        "kind": "build",
        "isDefault": true
      }
    }
  ]
}



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\.prisma\client\default.d.ts

/* eslint-disable @typescript-eslint/no-unused-vars */

import * as runtime from '@prisma/client/runtime/library'

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new Prisma()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client).
 */
export declare const PrismaClient: any

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new Prisma()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client).
 */
export declare type PrismaClient = any

export declare class PrismaClientExtends<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> {
  $extends: { extArgs: ExtArgs } & (<
    R extends runtime.Types.Extensions.UserArgs['result'] = {},
    M extends runtime.Types.Extensions.UserArgs['model'] = {},
    Q extends runtime.Types.Extensions.UserArgs['query'] = {},
    C extends runtime.Types.Extensions.UserArgs['client'] = {},
    Args extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.InternalArgs<R, M, {}, C>,
  >(
    args:
      | ((client: PrismaClientExtends<ExtArgs>) => { $extends: { extArgs: Args } })
      | { name?: string }
      | { result?: R & runtime.Types.Extensions.UserArgs['result'] }
      | { model?: M & runtime.Types.Extensions.UserArgs['model'] }
      | { query?: Q & runtime.Types.Extensions.UserArgs['query'] }
      | { client?: C & runtime.Types.Extensions.UserArgs['client'] },
  ) => PrismaClientExtends<Args & ExtArgs> & Args['client'])

  $transaction<R>(
    fn: (prisma: Omit<this, runtime.ITXClientDenyList>) => Promise<R>,
    options?: { maxWait?: number; timeout?: number; isolationLevel?: string },
  ): Promise<R>
  $transaction<P extends Prisma.PrismaPromise<any>[]>(
    arg: [...P],
    options?: { isolationLevel?: string },
  ): Promise<runtime.Types.Utils.UnwrapTuple<P>>
}

export declare const dmmf: any
export declare type dmmf = any

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

export namespace Prisma {
  export type TransactionClient = any

  export function defineExtension<
    R extends runtime.Types.Extensions.UserArgs['result'] = {},
    M extends runtime.Types.Extensions.UserArgs['model'] = {},
    Q extends runtime.Types.Extensions.UserArgs['query'] = {},
    C extends runtime.Types.Extensions.UserArgs['client'] = {},
    Args extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.InternalArgs<R, M, {}, C>,
  >(
    args:
      | ((client: PrismaClientExtends) => { $extends: { extArgs: Args } })
      | { name?: string }
      | { result?: R & runtime.Types.Extensions.UserArgs['result'] }
      | { model?: M & runtime.Types.Extensions.UserArgs['model'] }
      | { query?: Q & runtime.Types.Extensions.UserArgs['query'] }
      | { client?: C & runtime.Types.Extensions.UserArgs['client'] },
  ): (client: any) => PrismaClientExtends<Args>

  export type Extension = runtime.Types.Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = runtime.Types.Public.Args
  export import Payload = runtime.Types.Public.Payload
  export import Result = runtime.Types.Public.Result
  export import Exact = runtime.Types.Public.Exact
  export import PrismaPromise = runtime.Types.Public.PrismaPromise

  export const prismaVersion: {
    client: string
    engine: string
  }
}



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\.prisma\client\edge.d.ts

/* eslint-disable @typescript-eslint/no-unused-vars */

import * as runtime from '@prisma/client/runtime/library'

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new Prisma()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client).
 */
export declare const PrismaClient: any

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new Prisma()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client).
 */
export declare type PrismaClient = any

export declare class PrismaClientExtends<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> {
  $extends: { extArgs: ExtArgs } & (<
    R extends runtime.Types.Extensions.UserArgs['result'] = {},
    M extends runtime.Types.Extensions.UserArgs['model'] = {},
    Q extends runtime.Types.Extensions.UserArgs['query'] = {},
    C extends runtime.Types.Extensions.UserArgs['client'] = {},
    Args extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.InternalArgs<R, M, {}, C>,
  >(
    args:
      | ((client: PrismaClientExtends<ExtArgs>) => { $extends: { extArgs: Args } })
      | { name?: string }
      | { result?: R & runtime.Types.Extensions.UserArgs['result'] }
      | { model?: M & runtime.Types.Extensions.UserArgs['model'] }
      | { query?: Q & runtime.Types.Extensions.UserArgs['query'] }
      | { client?: C & runtime.Types.Extensions.UserArgs['client'] },
  ) => PrismaClientExtends<Args & ExtArgs> & Args['client'])

  $transaction<R>(
    fn: (prisma: Omit<this, runtime.ITXClientDenyList>) => Promise<R>,
    options?: { maxWait?: number; timeout?: number; isolationLevel?: string },
  ): Promise<R>
  $transaction<P extends Prisma.PrismaPromise<any>[]>(
    arg: [...P],
    options?: { isolationLevel?: string },
  ): Promise<runtime.Types.Utils.UnwrapTuple<P>>
}

export declare const dmmf: any
export declare type dmmf = any

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

export namespace Prisma {
  export type TransactionClient = any

  export function defineExtension<
    R extends runtime.Types.Extensions.UserArgs['result'] = {},
    M extends runtime.Types.Extensions.UserArgs['model'] = {},
    Q extends runtime.Types.Extensions.UserArgs['query'] = {},
    C extends runtime.Types.Extensions.UserArgs['client'] = {},
    Args extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.InternalArgs<R, M, {}, C>,
  >(
    args:
      | ((client: PrismaClientExtends) => { $extends: { extArgs: Args } })
      | { name?: string }
      | { result?: R & runtime.Types.Extensions.UserArgs['result'] }
      | { model?: M & runtime.Types.Extensions.UserArgs['model'] }
      | { query?: Q & runtime.Types.Extensions.UserArgs['query'] }
      | { client?: C & runtime.Types.Extensions.UserArgs['client'] },
  ): (client: any) => PrismaClientExtends<Args>

  export type Extension = runtime.Types.Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = runtime.Types.Public.Args
  export import Payload = runtime.Types.Public.Payload
  export import Result = runtime.Types.Public.Result
  export import Exact = runtime.Types.Public.Exact
  export import PrismaPromise = runtime.Types.Public.PrismaPromise

  export const prismaVersion: {
    client: string
    engine: string
  }
}



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\.prisma\client\index.d.ts

/* eslint-disable @typescript-eslint/no-unused-vars */

import * as runtime from '@prisma/client/runtime/library'

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new Prisma()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client).
 */
export declare const PrismaClient: any

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new Prisma()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client).
 */
export declare type PrismaClient = any

export declare class PrismaClientExtends<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> {
  $extends: { extArgs: ExtArgs } & (<
    R extends runtime.Types.Extensions.UserArgs['result'] = {},
    M extends runtime.Types.Extensions.UserArgs['model'] = {},
    Q extends runtime.Types.Extensions.UserArgs['query'] = {},
    C extends runtime.Types.Extensions.UserArgs['client'] = {},
    Args extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.InternalArgs<R, M, {}, C>,
  >(
    args:
      | ((client: PrismaClientExtends<ExtArgs>) => { $extends: { extArgs: Args } })
      | { name?: string }
      | { result?: R & runtime.Types.Extensions.UserArgs['result'] }
      | { model?: M & runtime.Types.Extensions.UserArgs['model'] }
      | { query?: Q & runtime.Types.Extensions.UserArgs['query'] }
      | { client?: C & runtime.Types.Extensions.UserArgs['client'] },
  ) => PrismaClientExtends<Args & ExtArgs> & Args['client'])

  $transaction<R>(
    fn: (prisma: Omit<this, runtime.ITXClientDenyList>) => Promise<R>,
    options?: { maxWait?: number; timeout?: number; isolationLevel?: string },
  ): Promise<R>
  $transaction<P extends Prisma.PrismaPromise<any>[]>(
    arg: [...P],
    options?: { isolationLevel?: string },
  ): Promise<runtime.Types.Utils.UnwrapTuple<P>>
}

export declare const dmmf: any
export declare type dmmf = any

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

export namespace Prisma {
  export type TransactionClient = any

  export function defineExtension<
    R extends runtime.Types.Extensions.UserArgs['result'] = {},
    M extends runtime.Types.Extensions.UserArgs['model'] = {},
    Q extends runtime.Types.Extensions.UserArgs['query'] = {},
    C extends runtime.Types.Extensions.UserArgs['client'] = {},
    Args extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.InternalArgs<R, M, {}, C>,
  >(
    args:
      | ((client: PrismaClientExtends) => { $extends: { extArgs: Args } })
      | { name?: string }
      | { result?: R & runtime.Types.Extensions.UserArgs['result'] }
      | { model?: M & runtime.Types.Extensions.UserArgs['model'] }
      | { query?: Q & runtime.Types.Extensions.UserArgs['query'] }
      | { client?: C & runtime.Types.Extensions.UserArgs['client'] },
  ): (client: any) => PrismaClientExtends<Args>

  export type Extension = runtime.Types.Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = runtime.Types.Public.Args
  export import Payload = runtime.Types.Public.Payload
  export import Result = runtime.Types.Public.Result
  export import Exact = runtime.Types.Public.Exact
  export import PrismaPromise = runtime.Types.Public.PrismaPromise

  export const prismaVersion: {
    client: string
    engine: string
  }
}



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\.prisma\client\wasm.d.ts

/* eslint-disable @typescript-eslint/no-unused-vars */

import * as runtime from '@prisma/client/runtime/library'

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new Prisma()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client).
 */
export declare const PrismaClient: any

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new Prisma()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client).
 */
export declare type PrismaClient = any

export declare class PrismaClientExtends<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> {
  $extends: { extArgs: ExtArgs } & (<
    R extends runtime.Types.Extensions.UserArgs['result'] = {},
    M extends runtime.Types.Extensions.UserArgs['model'] = {},
    Q extends runtime.Types.Extensions.UserArgs['query'] = {},
    C extends runtime.Types.Extensions.UserArgs['client'] = {},
    Args extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.InternalArgs<R, M, {}, C>,
  >(
    args:
      | ((client: PrismaClientExtends<ExtArgs>) => { $extends: { extArgs: Args } })
      | { name?: string }
      | { result?: R & runtime.Types.Extensions.UserArgs['result'] }
      | { model?: M & runtime.Types.Extensions.UserArgs['model'] }
      | { query?: Q & runtime.Types.Extensions.UserArgs['query'] }
      | { client?: C & runtime.Types.Extensions.UserArgs['client'] },
  ) => PrismaClientExtends<Args & ExtArgs> & Args['client'])

  $transaction<R>(
    fn: (prisma: Omit<this, runtime.ITXClientDenyList>) => Promise<R>,
    options?: { maxWait?: number; timeout?: number; isolationLevel?: string },
  ): Promise<R>
  $transaction<P extends Prisma.PrismaPromise<any>[]>(
    arg: [...P],
    options?: { isolationLevel?: string },
  ): Promise<runtime.Types.Utils.UnwrapTuple<P>>
}

export declare const dmmf: any
export declare type dmmf = any

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

export namespace Prisma {
  export type TransactionClient = any

  export function defineExtension<
    R extends runtime.Types.Extensions.UserArgs['result'] = {},
    M extends runtime.Types.Extensions.UserArgs['model'] = {},
    Q extends runtime.Types.Extensions.UserArgs['query'] = {},
    C extends runtime.Types.Extensions.UserArgs['client'] = {},
    Args extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.InternalArgs<R, M, {}, C>,
  >(
    args:
      | ((client: PrismaClientExtends) => { $extends: { extArgs: Args } })
      | { name?: string }
      | { result?: R & runtime.Types.Extensions.UserArgs['result'] }
      | { model?: M & runtime.Types.Extensions.UserArgs['model'] }
      | { query?: Q & runtime.Types.Extensions.UserArgs['query'] }
      | { client?: C & runtime.Types.Extensions.UserArgs['client'] },
  ): (client: any) => PrismaClientExtends<Args>

  export type Extension = runtime.Types.Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = runtime.Types.Public.Args
  export import Payload = runtime.Types.Public.Payload
  export import Result = runtime.Types.Public.Result
  export import Exact = runtime.Types.Public.Exact
  export import PrismaPromise = runtime.Types.Public.PrismaPromise

  export const prismaVersion: {
    client: string
    engine: string
  }
}



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\.prisma\client\deno\edge.d.ts

class PrismaClient {
  constructor() {
    throw new Error(
      '@prisma/client/deno/edge did not initialize yet. Please run "prisma generate" and try to import it again.',
    )
  }
}

export { PrismaClient }



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\@ampproject\remapping\package.json

{
  "name": "@ampproject/remapping",
  "version": "2.3.0",
  "description": "Remap sequential sourcemaps through transformations to point at the original source code",
  "keywords": [
    "source",
    "map",
    "remap"
  ],
  "main": "dist/remapping.umd.js",
  "module": "dist/remapping.mjs",
  "types": "dist/types/remapping.d.ts",
  "exports": {
    ".": [
      {
        "types": "./dist/types/remapping.d.ts",
        "browser": "./dist/remapping.umd.js",
        "require": "./dist/remapping.umd.js",
        "import": "./dist/remapping.mjs"
      },
      "./dist/remapping.umd.js"
    ],
    "./package.json": "./package.json"
  },
  "files": [
    "dist"
  ],
  "author": "Justin Ridgewell <jridgewell@google.com>",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ampproject/remapping.git"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=6.0.0"
  },
  "scripts": {
    "build": "run-s -n build:*",
    "build:rollup": "rollup -c rollup.config.js",
    "build:ts": "tsc --project tsconfig.build.json",
    "lint": "run-s -n lint:*",
    "lint:prettier": "npm run test:lint:prettier -- --write",
    "lint:ts": "npm run test:lint:ts -- --fix",
    "prebuild": "rm -rf dist",
    "prepublishOnly": "npm run preversion",
    "preversion": "run-s test build",
    "test": "run-s -n test:lint test:only",
    "test:debug": "node --inspect-brk node_modules/.bin/jest --runInBand",
    "test:lint": "run-s -n test:lint:*",
    "test:lint:prettier": "prettier --check '{src,test}/**/*.ts'",
    "test:lint:ts": "eslint '{src,test}/**/*.ts'",
    "test:only": "jest --coverage",
    "test:watch": "jest --coverage --watch"
  },
  "devDependencies": {
    "@rollup/plugin-typescript": "8.3.2",
    "@types/jest": "27.4.1",
    "@typescript-eslint/eslint-plugin": "5.20.0",
    "@typescript-eslint/parser": "5.20.0",
    "eslint": "8.14.0",
    "eslint-config-prettier": "8.5.0",
    "jest": "27.5.1",
    "jest-config": "27.5.1",
    "npm-run-all": "4.1.5",
    "prettier": "2.6.2",
    "rollup": "2.70.2",
    "ts-jest": "27.1.4",
    "tslib": "2.4.0",
    "typescript": "4.6.3"
  },
  "dependencies": {
    "@jridgewell/gen-mapping": "^0.3.5",
    "@jridgewell/trace-mapping": "^0.3.24"
  }
}



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\@ampproject\remapping\dist\types\build-source-map-tree.d.ts

import type { MapSource as MapSourceType } from './source-map-tree';
import type { SourceMapInput, SourceMapLoader } from './types';
/**
 * Recursively builds a tree structure out of sourcemap files, with each node
 * being either an `OriginalSource` "leaf" or a `SourceMapTree` composed of
 * `OriginalSource`s and `SourceMapTree`s.
 *
 * Every sourcemap is composed of a collection of source files and mappings
 * into locations of those source files. When we generate a `SourceMapTree` for
 * the sourcemap, we attempt to load each source file's own sourcemap. If it
 * does not have an associated sourcemap, it is considered an original,
 * unmodified source file.
 */
export default function buildSourceMapTree(input: SourceMapInput | SourceMapInput[], loader: SourceMapLoader): MapSourceType;



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\@ampproject\remapping\dist\types\remapping.d.ts

import SourceMap from './source-map';
import type { SourceMapInput, SourceMapLoader, Options } from './types';
export type { SourceMapSegment, EncodedSourceMap, EncodedSourceMap as RawSourceMap, DecodedSourceMap, SourceMapInput, SourceMapLoader, LoaderContext, Options, } from './types';
export type { SourceMap };
/**
 * Traces through all the mappings in the root sourcemap, through the sources
 * (and their sourcemaps), all the way back to the original source location.
 *
 * `loader` will be called every time we encounter a source file. If it returns
 * a sourcemap, we will recurse into that sourcemap to continue the trace. If
 * it returns a falsey value, that source file is treated as an original,
 * unmodified source file.
 *
 * Pass `excludeContent` to exclude any self-containing source file content
 * from the output sourcemap.
 *
 * Pass `decodedMappings` to receive a SourceMap with decoded (instead of
 * VLQ encoded) mappings.
 */
export default function remapping(input: SourceMapInput | SourceMapInput[], loader: SourceMapLoader, options?: boolean | Options): SourceMap;



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\@ampproject\remapping\dist\types\source-map-tree.d.ts

import { GenMapping } from '@jridgewell/gen-mapping';
import type { TraceMap } from '@jridgewell/trace-mapping';
export declare type SourceMapSegmentObject = {
    column: number;
    line: number;
    name: string;
    source: string;
    content: string | null;
    ignore: boolean;
};
export declare type OriginalSource = {
    map: null;
    sources: Sources[];
    source: string;
    content: string | null;
    ignore: boolean;
};
export declare type MapSource = {
    map: TraceMap;
    sources: Sources[];
    source: string;
    content: null;
    ignore: false;
};
export declare type Sources = OriginalSource | MapSource;
/**
 * MapSource represents a single sourcemap, with the ability to trace mappings into its child nodes
 * (which may themselves be SourceMapTrees).
 */
export declare function MapSource(map: TraceMap, sources: Sources[]): MapSource;
/**
 * A "leaf" node in the sourcemap tree, representing an original, unmodified source file. Recursive
 * segment tracing ends at the `OriginalSource`.
 */
export declare function OriginalSource(source: string, content: string | null, ignore: boolean): OriginalSource;
/**
 * traceMappings is only called on the root level SourceMapTree, and begins the process of
 * resolving each mapping in terms of the original source files.
 */
export declare function traceMappings(tree: MapSource): GenMapping;
/**
 * originalPositionFor is only called on children SourceMapTrees. It recurses down into its own
 * child SourceMapTrees, until we find the original source map.
 */
export declare function originalPositionFor(source: Sources, line: number, column: number, name: string): SourceMapSegmentObject | null;



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\@ampproject\remapping\dist\types\source-map.d.ts

import type { GenMapping } from '@jridgewell/gen-mapping';
import type { DecodedSourceMap, EncodedSourceMap, Options } from './types';
/**
 * A SourceMap v3 compatible sourcemap, which only includes fields that were
 * provided to it.
 */
export default class SourceMap {
    file?: string | null;
    mappings: EncodedSourceMap['mappings'] | DecodedSourceMap['mappings'];
    sourceRoot?: string;
    names: string[];
    sources: (string | null)[];
    sourcesContent?: (string | null)[];
    version: 3;
    ignoreList: number[] | undefined;
    constructor(map: GenMapping, options: Options);
    toString(): string;
}



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\@ampproject\remapping\dist\types\types.d.ts

import type { SourceMapInput } from '@jridgewell/trace-mapping';
export type { SourceMapSegment, DecodedSourceMap, EncodedSourceMap, } from '@jridgewell/trace-mapping';
export type { SourceMapInput };
export declare type LoaderContext = {
    readonly importer: string;
    readonly depth: number;
    source: string;
    content: string | null | undefined;
    ignore: boolean | undefined;
};
export declare type SourceMapLoader = (file: string, ctx: LoaderContext) => SourceMapInput | null | undefined | void;
export declare type Options = {
    excludeContent?: boolean;
    decodedMappings?: boolean;
};



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\@aws-crypto\sha256-browser\package.json

{
  "name": "@aws-crypto/sha256-browser",
  "version": "5.2.0",
  "scripts": {
    "prepublishOnly": "tsc -p tsconfig.json && tsc -p tsconfig.module.json",
    "pretest": "tsc -p tsconfig.test.json",
    "test": "mocha --require ts-node/register test/**/*test.ts"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:aws/aws-sdk-js-crypto-helpers.git"
  },
  "author": {
    "name": "AWS Crypto Tools Team",
    "email": "aws-cryptools@amazon.com",
    "url": "https://docs.aws.amazon.com/aws-crypto-tools/index.html?id=docs_gateway#lang/en_us"
  },
  "homepage": "https://github.com/aws/aws-sdk-js-crypto-helpers/tree/master/packages/sha256-browser",
  "license": "Apache-2.0",
  "dependencies": {
    "@aws-crypto/sha256-js": "^5.2.0",
    "@aws-crypto/supports-web-crypto": "^5.2.0",
    "@aws-crypto/util": "^5.2.0",
    "@aws-sdk/types": "^3.222.0",
    "@aws-sdk/util-locate-window": "^3.0.0",
    "@smithy/util-utf8": "^2.0.0",
    "tslib": "^2.6.2"
  },
  "main": "./build/main/index.js",
  "module": "./build/module/index.js",
  "types": "./build/main/index.d.ts",
  "gitHead": "c11b171b35ec5c093364f0e0d8dc4ab1af68e748"
}



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\@aws-crypto\sha256-browser\tsconfig.json

{
  "extends": "../tsconfig.json",
  "compilerOptions": {
    "rootDir": "./src",
    "outDir": "./build/main",
    "lib": ["dom"],
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules/**"]
}



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\@aws-crypto\sha256-browser\tsconfig.module.json

{
  "extends": "./tsconfig",
  "compilerOptions": {
    "outDir": "build/module",
    "module": "esnext",
  }
}



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\@aws-crypto\sha256-browser\build\main\constants.d.ts

export declare const SHA_256_HASH: {
    name: "SHA-256";
};
export declare const SHA_256_HMAC_ALGO: {
    name: "HMAC";
    hash: {
        name: "SHA-256";
    };
};
export declare const EMPTY_DATA_SHA_256: Uint8Array;



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\@aws-crypto\sha256-browser\build\main\crossPlatformSha256.d.ts

import { Checksum, SourceData } from "@aws-sdk/types";
export declare class Sha256 implements Checksum {
    private hash;
    constructor(secret?: SourceData);
    update(data: SourceData, encoding?: "utf8" | "ascii" | "latin1"): void;
    digest(): Promise<Uint8Array>;
    reset(): void;
}



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\@aws-crypto\sha256-browser\build\main\index.d.ts

export * from "./crossPlatformSha256";
export { Sha256 as WebCryptoSha256 } from "./webCryptoSha256";



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\@aws-crypto\sha256-browser\build\main\isEmptyData.d.ts

import { SourceData } from "@aws-sdk/types";
export declare function isEmptyData(data: SourceData): boolean;



C:\Users\kikelo\Documents\GitHub\yarn-monorepo-ts\node_modules\@aws-crypto\sha256-browser\build\main\webCryptoSha256.d.ts

import { Checksum, SourceData } from "@aws-sdk/types";
export declare class Sha256 implements Checksum {
    private readonly secret?;
    private key;
    private toHash;
    constructor(secret?: SourceData);
    update(data: SourceData): void;
    digest(): Promise<Uint8Array>;
    reset(): void;
}



